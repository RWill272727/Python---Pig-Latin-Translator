%logstop
%logstart -rtq ~/.logs/vc.py append
%matplotlib inline
import matplotlib
import seaborn as sns
sns.set()
matplotlib.rcParams['figure.dpi'] = 144
from static_grader import grader

Exercise 1: point_repr
The first step in defining most classes is to define their __init__ and __repr__ methods so that we can construct and represent distinct objects of that class. Our Point class should accept two arguments, x and y, and be represented by a string 'Point(x, y)' with appropriate values for x and y.

When you've written a Point class capable of this, execute the cell with grader.score for this question (do not edit that cell; you only need to modify the Point class).

class Point(object):

    def __init__(self, x, y):
        self.x = x
        self.y = y
            
    def __repr__(self):
        return "Point({}, {})".format(self.x, self.y)
class Point(object):
​
    def __init__(self, x, y):
        self.x = x
        self.y = y
            
    def __repr__(self):
        return "Point({}, {})".format(self.x, self.y)
Point(4,7)
Point(4, 7)
grader.score.vc__point_repr(lambda points: [str(Point(*point)) for point in points])
==================
Your score:  1.0
==================
Exercise 2: add_subtract
The most basic vector operations we want our Point object to handle are addition and subtraction. For two points (x1,y1)+(x2,y2)=(x1+x2,y1+y2)(x1,y1)+(x2,y2)=(x1+x2,y1+y2) and similarly for subtraction. Implement a method within Point that allows two Point objects to be added together using the + operator, and likewise for subtraction. Once this is done, execute the grader.score cell for this question (do not edit that cell; you only need to modify the Point class.)

(Remember that __add__ and __sub__ methods will allow us to use the + and - operators.)

class Point(object):
​
    def __init__(self, x, y):
        self.x = x
        self.y = y
            
    def __repr__(self):
        return "Point({}, {})".format(self.x, self.y)
    
    def __add__(self, other):
        return Point(self.x + other.x, self.y + other.y)
    
    def __sub__(self, other):
        return Point(self.x - other.x, self.y - other.y)
from functools import reduce
def add_sub_results(points):
    points = [Point(*point) for point in points]
    return [str(reduce(lambda x, y: x + y, points)), 
            str(reduce(lambda x, y: x - y, points))]
​
grader.score.vc__add_subtract(add_sub_results)
==================
Your score:  1.0
==================
Exercise 3: multiplication
Within linear algebra there's many different kinds of multiplication: scalar multiplication, inner product, cross product, and matrix product. We're going to implement scalar multiplication and the inner product.

We can define scalar multiplication given a point PP and a scalar aa as
aP=a(x,y)=(ax,ay)
aP=a(x,y)=(ax,ay)
and we can define the inner product for points P,QP,Q as
P⋅Q=(x1,y1)⋅(x2,y2)=x1x2+y1y2
P⋅Q=(x1,y1)⋅(x2,y2)=x1x2+y1y2
To test that you've implemented this correctly, compute 2(x,y)⋅(x,y)2(x,y)⋅(x,y) for a Point object. Once this is done, execute the grader.score cell for this question (do not edit that cell; you only need to modify the Point class.)

(Remember that __mul__ method will allow us to use the * operator. Also don't forget that the ordering of operands matters when implementing these operators.)

class Point(object):
​
    def __init__(self, x, y):
        self.x = x
        self.y = y
            
    def __repr__(self):
        return "Point({}, {})".format(self.x, self.y)
    
    def __mul__(self, other):
            return (self.x * other.x + self.y * other.y)
point = Point(4,2)
print(point.__mul__(Point(4,2)))
20
def mult_result(points):
    points = [Point(*point) for point in points]
    return [point*point*2 for point in points]
​
grader.score.vc__multiplication(mult_result)
==================
Your score:  1.0
==================
Exercise 4: Distance
Another quantity we might want to compute is the distance between two points. This is generally given for points P1=(x1,y1)P1=(x1,y1) and P2=(x2,y2)P2=(x2,y2) as
D=|P2−P1|=(x1−x2)2+(y1−y2)2⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯√.
D=|P2−P1|=(x1−x2)2+(y1−y2)2.
Implement a method called distance which finds the distance from a point to another point.

Once this is done, execute the grader.score cell for this question (do not edit that cell; you only need to modify the Point class.)

Hint
You can use the sqrt function from the math package.
from math import sqrt
​
class Point(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y
            
    def distance(self, other):
        return sqrt((self.x - other.x) ** 2 + (self.y - other.y) ** 2)
    
    def __repr__(self):
        return "Point({}, {})".format(self.x, self.y)
point = (Point(5,3))
print(point.distance(Point(0,0)))
5.830951894845301
def dist_result(points):
    points = [Point(*point) for point in points]
    return [points[0].distance(point) for point in points]
​
grader.score.vc__distance(dist_result)
==================
Your score:  1.0
==================
Exercise 5: Algorithm
Now we will use these points to solve a real world problem! We can use our Point objects to represent measurements of two different quantities (e.g. a company's stock price and volume). One thing we might want to do with a data set is to separate the points into groups of similar points. Here we will implement an iterative algorithm to do this which will be a specific case of the very general kk-means clustering algorithm. The algorithm will require us to keep track of two clusters, each of which have a list of points and a center (which is another point, not necessarily one of the points we are clustering). After making an initial guess at the center of the two clusters, C1C1 and C2C2, the steps proceed as follows

Assign each point to C1C1 or C2C2 based on whether the point is closer to the center of C1C1 or C2C2.
Recalculate the center of C1C1 and C2C2 based on the contained points.
See reference for more information.

This algorithm will terminate in general when the assignments no longer change. For this question, we would like you to initialize one cluster at (1, 0) and the other at (-1, 0).

The returned values should be the two centers of the clusters ordered by greatest x value. Please return these as a list of numeric tuples [(x1,y1),(x2,y2)][(x1,y1),(x2,y2)]
In order to accomplish this we will create a class called cluster which has two methods besides __init__ which you will need to write. The first method update will update the center of the Cluster given the points contained in the attribute points. Remember, you after updating the center of the cluster, you will want to reassign the points and thus remove previous assignments. The other method add_point will add a point to the points attribute.

Once this is done, execute the grader.score cell for this question (do not edit that cell; you only need to modify the Cluster class and compute_result function.)

class Cluster(object):
    def __init__(self, x, y):
        self.center = Point(x, y)
        self.points = []
    
    def update(self):
        """Use all the points in a cluster to find the center and reset (empty) the points in the list"""
        x_c = sum([point.x for point in self.points]) / len(self.points)
        y_c = sum([point.y for point in self.points]) / len(self.points)
​
        self.center = Point(x_c, y_c)
        self.points = []
    
    def add_point(self, point):
        """Add a new point to the list"""
        self.points.append(point)
def compute_result(points):
    """List of all the points in the data set"""
    points = [Point(*point) for point in points]
    a = Cluster(1,0)
    b = Cluster(-1,0)
    """a old list represents points that belonged in the cluster a in the previous iteration"""
    a_old = []
    
    for _ in range(10000): # max iterations
        """Allocating what cluster a or b a certain point belongs to and adding it to that list"""
        for point in points:
            if point.distance(a.center) < point.distance(b.center):
                # add the right point
                a.add_point(point)
            else:
                # add the right point
                b.add_point(point)
        """if a old equal a points then the algorithm has converged"""
        if a_old == a.points:
            break
            """Now a old needs to be the points we found for this round of the iteration"""
        a_old = a.points
        """Now empty out the lists with update function"""
        a.update()
        b.update()
    """sorted returns lowest to highest by first value, but reversing it sorts highest first"""    
    return sorted([(a.center.x, a.center.y), (b.center.x, b.center.y)], reverse=True)   
    #return [(x, y)] * 2
grader.score.vc__k_means(compute_result)
==================
Your score:  1.0
==================
